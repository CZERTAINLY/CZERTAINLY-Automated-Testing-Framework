name: Run tests defined in a folder

on:
  workflow_dispatch:
    inputs:
      configuration:
        type: string
        description: 'Configuration for the test run'
        required: true

run-name: Run test action - ${{ fromJson(inputs.configuration).test-folder }}

# Define environment variables that are used across the workflow
# It is easier to change it here than in every job
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  POSTGRES_IMAGE: >-
    ${{
      (
        fromJson(inputs.configuration).services.postgresql.enabled ) &&
        format('postgres:{0}', fromJson(inputs.configuration).services.postgresql.version
      ) || ''
    }}
  POSTGRES_USER: ${{ fromJson(inputs.configuration).services.postgresql.user }}
  POSTGRES_PASSWORD: ${{ fromJson(inputs.configuration).services.postgresql.password }}
  POSTGRES_DB: ${{ fromJson(inputs.configuration).services.postgresql.db }}
  POSTGRES_PORT: ${{ fromJson(inputs.configuration).services.postgresql.port }}
  TEST_FOLDER_NAME: ${{ fromJson(inputs.configuration).test-folder }}
  TEST_FOLDER_PATH: ${{ github.workspace }}/${{ fromJson(inputs.configuration).test-folder }}
  K8S_CLUSTER_DIST: ${{ fromJson(inputs.configuration).k8s-cluster.dist }}
  CZERTAINLY_VERSION: ${{ fromJson(inputs.configuration).czertainly.version }}
  TK_SUBSCRIPTION: ${{ fromJson(inputs.configuration).testkube.subscription }}
  TK_ORGANIZATION: ${{ secrets.TK_ORGANIZATION }}
  TK_ENVIRONMENT: ${{ secrets.TK_ENVIRONMENT }}
  TK_TOKEN: ${{ secrets.TK_TOKEN }}
  TK_AGENT: ${{ secrets.TK_AGENT }}
  TK_VERSION: ${{ fromJson(inputs.configuration).testkube.version }}
  TEAMS_INCOMING_WEBHOOK_URL: ${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}
  RUN_TESTS: ${{ fromJson(inputs.configuration).testkube.run-tests || 'true' }}
  RUN_TEST_SUITES: ${{ fromJson(inputs.configuration).testkube.run-test-suites || 'false' }}
  SEND_NOTIFICATION: ${{ fromJson(inputs.configuration).notifications.enabled || 'false' }}
  NOTIFICATION_CHANNEL: ${{ fromJson(inputs.configuration).notifications.channel || 'teams' }}

jobs:

  test:
    name: Run test folder action - ${{ fromJson(inputs.configuration).test-folder }}
    runs-on: ubuntu-latest

    services:
      postgres:
        # Workaround for conditional startup of the service described here: https://github.com/actions/runner/issues/822
        # The `env` context does not work here, so we need to use expression
        image: >-
          ${{
            (
              fromJson(inputs.configuration).services.postgresql.enabled ) &&
              format('postgres:{0}', fromJson(inputs.configuration).services.postgresql.version
            ) || ''
          }}
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        # The `env` context does not work here, so we need to use expression
        ports:
          - ${{ fromJson(inputs.configuration).services.postgresql.port }}:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mail:
        # Workaround for conditional startup of the service described here: https://github.com/actions/runner/issues/822
        # The `env` context does not work here, so we need to use expression
        image: >-
          ${{
            (
              fromJson(inputs.configuration).services.mail.enabled ) &&
              format('mailserver/docker-mailserver:{0}', fromJson(inputs.configuration).services.mail.version
            ) || ''
          }}
        # The `env` context does not work here, so we need to use expression
        ports:
          - ${{ fromJson(inputs.configuration).services.mail.port }}:25
        env:
          SMTP_ONLY: 1
          OVERRIDE_HOSTNAME: czertainly.helm

    steps:
      # Print the value of the input `configuration` to the log
      - name: Print inputs
        run: |
          echo '${{ inputs.configuration }}' | jq .

      # Check out the repository
      - uses: actions/checkout@v4

      # Get additional variables and IDs required
      - name: Get additional variables
        uses: ./.github/actions/additional-variables

      # Initialize data for test results or database
      - name: Initialize data
        uses: ./.github/actions/initialize-data

      # Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.1

      # Create k8s cluster based on the distribution specified in the configuration
      - name: Create k8s cluster - ${{ env.K8S_CLUSTER_DIST }}
        uses: ./.github/actions/create-k8s-cluster
        with:
          dist: ${{ env.K8S_CLUSTER_DIST }}

      # Install CZERTAINLY from Helm chart
      - name: Install CZERTAINLY version ${{ env.CZERTAINLY_VERSION }}
        run: |
          echo "Installing CZERTAINLY version $CZERTAINLY_VERSION"
          kubectl create namespace czertainly
          helm install --namespace czertainly -f $TEST_FOLDER_PATH/czertainly-values.yaml czertainly-tlm \
            oci://harbor.3key.company/czertainly-helm/czertainly --version $CZERTAINLY_VERSION --timeout 600s

      # Deploy Testkube environment
      - name: Deploy Testkube
        uses: ./.github/actions/deploy-testkube

      # Create Testkube CRDs and run tests
      - name: Run tests
        if: env.RUN_TESTS == 'true'
        uses: ./.github/actions/run-tests

      # Create Testkube CRDs and run test-suites
      - name: Run test-suites
        if: env.RUN_TEST_SUITES == 'true'
        uses: ./.github/actions/run-test-suites

      # Upload test results as artifact
      - name: Upload test results as artifact
        uses: ./.github/actions/upload-results

      # Notify about failed tests through configured channel
      - name: Notify about failed tests
        if: env.SEND_NOTIFICATION == 'true'
        uses: ./.github/actions/send-notification
        with:
          channel: ${{ env.NOTIFICATION_CHANNEL }}

      # Check if any test failed and fail the workflow if so
      - name: Should workflow fail
        uses: ./.github/actions/should-workflow-fail
