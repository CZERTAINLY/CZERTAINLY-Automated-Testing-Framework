name: Run tests defined in a folder

on:
  workflow_dispatch:
    inputs:
      configuration:
        type: string
        description: 'Configuration for the test run'
        required: true

run-name: Run test action - ${{ fromJson(inputs.configuration).test-folder }}

env:
  POSTGRES_IMAGE: ${{ ( fromJson(inputs.configuration).services.postgresql.enabled ) && format('postgres:{0}', fromJson(inputs.configuration).services.postgresql.version) || '' }}

jobs:

  test:
    name: Run test folder action - ${{ fromJson(inputs.configuration).test-folder }}
    runs-on: ubuntu-latest

    services:
      postgres:
        # Workaround for conditional startup of the service described here: https://github.com/actions/runner/issues/822
        # The `env` context does not work here, so we need to use expression
        image: ${{ ( fromJson(inputs.configuration).services.postgresql.enabled ) && format('postgres:{0}', fromJson(inputs.configuration).services.postgresql.version) || '' }}
        env:
          POSTGRES_USER: ${{ fromJson(inputs.configuration).services.postgresql.user }}
          POSTGRES_PASSWORD: ${{ fromJson(inputs.configuration).services.postgresql.password }}
          POSTGRES_DB: ${{ fromJson(inputs.configuration).services.postgresql.db }}
        ports:
          - ${{ fromJson(inputs.configuration).services.postgresql.port }}:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mail:
        # Workaround for conditional startup of the service described here: https://github.com/actions/runner/issues/822
        image: ${{ ( fromJson(inputs.configuration).services.mail.enabled ) && format('mailserver/docker-mailserver:{0}', fromJson(inputs.configuration).services.mail.version) || '' }}
        ports:
          - ${{ fromJson(inputs.configuration).services.mail.port }}:25
        env:
          SMTP_ONLY: 1
          OVERRIDE_HOSTNAME: czertainly.helm

    steps:
      - name: Print inputs
        run: |
          echo "Postgres image: $POSTGRES_IMAGE"
          echo '${{ inputs.configuration }}' | jq .

      # Checks-out only the content of the test folder
      - uses: actions/checkout@v4

      - name: Initialize database
        env:
          PGPASSWORD: ${{ fromJson(inputs.configuration).services.postgresql.password }}
        run: |
          ls -la 
          ls -la ${{ github.workspace }}/${{ fromJson(inputs.configuration).test-folder }}/initdb
          psql -h localhost -U ${{ fromJson(inputs.configuration).services.postgresql.user }} \
            -d ${{ fromJson(inputs.configuration).services.postgresql.db }} -f ${{ github.workspace }}/${{ fromJson(inputs.configuration).test-folder }}/initdb/init-czertainlydb.sql

      - name: Create k8s cluster
        if : ${{ fromJson(inputs.configuration).k8s-cluster.dist }} == 'microk8s'
        uses: balchua/microk8s-actions@v0.3.0
        with:
          channel: '1.26/stable'
          addons: '["dns", "rbac", "ingress", "hostpath-storage"]'

      - name: Prepare local kubectl context
        run: |
          mkdir -p ${{ github.workspace }}/.kube
          sudo microk8s config > ${{ github.workspace }}/.kube/config
          sudo chown -R runner: ${{ github.workspace }}/.kube

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.1

      - name: Install CZERTAINLY
        env:
          CZERTAINLY_VERSION: ${{ fromJson(inputs.configuration).czertainly.version }}
        run: |
          echo "Installing CZERTAINLY version $CZERTAINLY_VERSION"
          echo "Installing CZERTAINLY version ${{ fromJson(inputs.configuration).czertainly.version }}"
          kubectl create namespace czertainly
          helm install --namespace czertainly -f ${{ github.workspace }}/${{ fromJson(inputs.configuration).test-folder }}/czertainly-values.yaml czertainly-tlm oci://harbor.3key.company/czertainly-helm/czertainly --version $CZERTAINLY_VERSION --timeout 600s

      - name: Installing Helm repositories
        run: |
          helm repo add kubeshop https://kubeshop.github.io/helm-charts

      - name: Deploy Testkube using Helm
        run: |-
          helm upgrade --install --atomic --timeout 600s testkube kubeshop/testkube --namespace testkube --create-namespace

      - name: Create Testkube CRDs
        run: |
          kubectl apply -f ${{ github.workspace }}/${{ fromJson(inputs.configuration).test-folder }}/tests --recursive

      # Running test
      #- name: Run tests
      #  id: run_test
      #  uses: kubeshop/testkube-docker-action@v1
      #  env:
      #    KUBECONFIG: ${{ github.workspace }}/.kube/config
      #  with:
      #    command: run
      #    resource: test
      #    parameters: curl -f

      - name: Setup Testkube
        uses: kubeshop/setup-testkube@v1
        with:
          namespace: testkube

      - name: Run test
        run: |
          testkube run test czertainly-auth-test -f