name: Run tests
description: Apply Testkube CRDs and run all tests and test-cases

runs:
  using: "composite"

  steps:

    - name: Create Testkube CRDs
      shell: bash
      run: |
        kubectl apply -f $TEST_FOLDER_PATH/tests --recursive

    - name: Run all tests
      shell: bash
      run: |
        for test in $(kubectl get tests.tests.testkube.io -n testkube --no-headers -o custom-columns=":metadata.name") ; do
          testkube run test $test --name $test
        done

    - name: Wait for tests to finish
      shell: bash
      run: |
        kubectl -n testkube wait job --all --for=condition=Complete --timeout=600s

    - name: Print test results
      shell: bash
      run: |
        testkube get execution
        
        for test in $(kubectl get tests.tests.testkube.io -n testkube --no-headers -o custom-columns=":metadata.name") ; do
          testkube get execution $test
          if [[ $(kubectl get tests.tests.testkube.io $test -n testkube -o jsonpath='{.status.latestExecution.status}') != "passed" ]]; then
            exit 1
          fi
        done

    - name: Run all test-suites
      shell: bash
      run: |
        for test in $(kubectl get testsuite.tests.testkube.io -n testkube --no-headers -o custom-columns=":metadata.name") ; do
          testkube run testsuite $test --name $test
        done

    - name: Wait for test-suites to finish
      shell: bash
      run: |
        kubectl -n testkube wait job --all --for=condition=Complete --timeout=600s

    - name: Print test-suite results
      shell: bash
      run: |
        testkube get testsuiteexecution
        
        for test in $(kubectl get testsuite.tests.testkube.io -n testkube --no-headers -o custom-columns=":metadata.name") ; do
          testkube get execution $test
          if [[ $(kubectl get testsuite.tests.testkube.io $test -n testkube -o jsonpath='{.status.latestExecution.status}') != "passed" ]]; then
            exit 1
          fi
        done
